# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import GL20_pb2 as GL20__pb2


class serviceGL20Stub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.digitalWriteToggle = channel.unary_unary(
                '/serviceGL20/digitalWriteToggle',
                request_serializer=GL20__pb2.GPIO.SerializeToString,
                response_deserializer=GL20__pb2.GPIO.FromString,
                )
        self.digitalWriteToggleAll = channel.unary_unary(
                '/serviceGL20/digitalWriteToggleAll',
                request_serializer=GL20__pb2.GPIO.SerializeToString,
                response_deserializer=GL20__pb2.GPIO.FromString,
                )
        self.digitalReadAll = channel.unary_unary(
                '/serviceGL20/digitalReadAll',
                request_serializer=GL20__pb2.GPIO.SerializeToString,
                response_deserializer=GL20__pb2.GPIO.FromString,
                )
        self.digitalRead = channel.unary_unary(
                '/serviceGL20/digitalRead',
                request_serializer=GL20__pb2.GPIO.SerializeToString,
                response_deserializer=GL20__pb2.GPIO.FromString,
                )
        self.digitalWrite = channel.unary_unary(
                '/serviceGL20/digitalWrite',
                request_serializer=GL20__pb2.GPIO.SerializeToString,
                response_deserializer=GL20__pb2.GPIO.FromString,
                )
        self.digitalWriteAll = channel.unary_unary(
                '/serviceGL20/digitalWriteAll',
                request_serializer=GL20__pb2.GPIO.SerializeToString,
                response_deserializer=GL20__pb2.GPIO.FromString,
                )


class serviceGL20Servicer(object):
    """Missing associated documentation comment in .proto file."""

    def digitalWriteToggle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def digitalWriteToggleAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def digitalReadAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def digitalRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def digitalWrite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def digitalWriteAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_serviceGL20Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'digitalWriteToggle': grpc.unary_unary_rpc_method_handler(
                    servicer.digitalWriteToggle,
                    request_deserializer=GL20__pb2.GPIO.FromString,
                    response_serializer=GL20__pb2.GPIO.SerializeToString,
            ),
            'digitalWriteToggleAll': grpc.unary_unary_rpc_method_handler(
                    servicer.digitalWriteToggleAll,
                    request_deserializer=GL20__pb2.GPIO.FromString,
                    response_serializer=GL20__pb2.GPIO.SerializeToString,
            ),
            'digitalReadAll': grpc.unary_unary_rpc_method_handler(
                    servicer.digitalReadAll,
                    request_deserializer=GL20__pb2.GPIO.FromString,
                    response_serializer=GL20__pb2.GPIO.SerializeToString,
            ),
            'digitalRead': grpc.unary_unary_rpc_method_handler(
                    servicer.digitalRead,
                    request_deserializer=GL20__pb2.GPIO.FromString,
                    response_serializer=GL20__pb2.GPIO.SerializeToString,
            ),
            'digitalWrite': grpc.unary_unary_rpc_method_handler(
                    servicer.digitalWrite,
                    request_deserializer=GL20__pb2.GPIO.FromString,
                    response_serializer=GL20__pb2.GPIO.SerializeToString,
            ),
            'digitalWriteAll': grpc.unary_unary_rpc_method_handler(
                    servicer.digitalWriteAll,
                    request_deserializer=GL20__pb2.GPIO.FromString,
                    response_serializer=GL20__pb2.GPIO.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'serviceGL20', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class serviceGL20(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def digitalWriteToggle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serviceGL20/digitalWriteToggle',
            GL20__pb2.GPIO.SerializeToString,
            GL20__pb2.GPIO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def digitalWriteToggleAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serviceGL20/digitalWriteToggleAll',
            GL20__pb2.GPIO.SerializeToString,
            GL20__pb2.GPIO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def digitalReadAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serviceGL20/digitalReadAll',
            GL20__pb2.GPIO.SerializeToString,
            GL20__pb2.GPIO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def digitalRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serviceGL20/digitalRead',
            GL20__pb2.GPIO.SerializeToString,
            GL20__pb2.GPIO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def digitalWrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serviceGL20/digitalWrite',
            GL20__pb2.GPIO.SerializeToString,
            GL20__pb2.GPIO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def digitalWriteAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serviceGL20/digitalWriteAll',
            GL20__pb2.GPIO.SerializeToString,
            GL20__pb2.GPIO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
